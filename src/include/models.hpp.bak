/*
    This file is part of misclass.
    Copyright (C) 2015, 2016 Trustees of Columbia University
    
    misclass is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    misclass is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
    You should have received a copy of the GNU General Public License
    along with rstanarm.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.14

#include <stan/model/model_header.hpp>

namespace model_logistic_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

class model_logistic : public prob_grad {
private:
    int N;
    vector<int> y;
    int K;
    matrix_d X;
    vector_d X_means;
    vector<int> J_1;
    int N_1;
    int K_1;
    vector_d Z_1;
    vector<int> J_2;
    int N_2;
    int K_2;
    vector_d Z_2;
public:
    model_logistic(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        typedef boost::ecuyer1988 rng_t;
        rng_t base_rng(0);  // 0 seed default
        ctor_body(context__, base_rng, pstream__);
    }

    template <class RNG>
    model_logistic(stan::io::var_context& context__,
        RNG& base_rng__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, base_rng__, pstream__);
    }

    template <class RNG>
    void ctor_body(stan::io::var_context& context__,
                   RNG& base_rng__,
                   std::ostream* pstream__) {
        current_statement_begin__ = -1;

        static const char* function__ = "model_logistic_namespace::model_logistic";
        (void) function__; // dummy call to supress warning
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        context__.validate_dims("data initialization", "N", "int", context__.to_vec());
        N = int(0);
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        N = vals_i__[pos__++];
        context__.validate_dims("data initialization", "y", "int", context__.to_vec(N));
        validate_non_negative_index("y", "N", N);
        y = std::vector<int>(N,int(0));
        vals_i__ = context__.vals_i("y");
        pos__ = 0;
        size_t y_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < y_limit_0__; ++i_0__) {
            y[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "K", "int", context__.to_vec());
        K = int(0);
        vals_i__ = context__.vals_i("K");
        pos__ = 0;
        K = vals_i__[pos__++];
        context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(N,K));
        validate_non_negative_index("X", "N", N);
        validate_non_negative_index("X", "K", K);
        X = matrix_d(static_cast<Eigen::VectorXd::Index>(N),static_cast<Eigen::VectorXd::Index>(K));
        vals_r__ = context__.vals_r("X");
        pos__ = 0;
        size_t X_m_mat_lim__ = N;
        size_t X_n_mat_lim__ = K;
        for (size_t n_mat__ = 0; n_mat__ < X_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < X_m_mat_lim__; ++m_mat__) {
                X(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("X_means", "K", K);
        X_means = vector_d(static_cast<Eigen::VectorXd::Index>(K));
        context__.validate_dims("data initialization", "X_means", "vector_d", context__.to_vec(K));
        vals_r__ = context__.vals_r("X_means");
        pos__ = 0;
        size_t X_means_i_vec_lim__ = K;
        for (size_t i_vec__ = 0; i_vec__ < X_means_i_vec_lim__; ++i_vec__) {
            X_means[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "J_1", "int", context__.to_vec(N));
        validate_non_negative_index("J_1", "N", N);
        J_1 = std::vector<int>(N,int(0));
        vals_i__ = context__.vals_i("J_1");
        pos__ = 0;
        size_t J_1_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < J_1_limit_0__; ++i_0__) {
            J_1[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "N_1", "int", context__.to_vec());
        N_1 = int(0);
        vals_i__ = context__.vals_i("N_1");
        pos__ = 0;
        N_1 = vals_i__[pos__++];
        context__.validate_dims("data initialization", "K_1", "int", context__.to_vec());
        K_1 = int(0);
        vals_i__ = context__.vals_i("K_1");
        pos__ = 0;
        K_1 = vals_i__[pos__++];
        validate_non_negative_index("Z_1", "N", N);
        Z_1 = vector_d(static_cast<Eigen::VectorXd::Index>(N));
        context__.validate_dims("data initialization", "Z_1", "vector_d", context__.to_vec(N));
        vals_r__ = context__.vals_r("Z_1");
        pos__ = 0;
        size_t Z_1_i_vec_lim__ = N;
        for (size_t i_vec__ = 0; i_vec__ < Z_1_i_vec_lim__; ++i_vec__) {
            Z_1[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "J_2", "int", context__.to_vec(N));
        validate_non_negative_index("J_2", "N", N);
        J_2 = std::vector<int>(N,int(0));
        vals_i__ = context__.vals_i("J_2");
        pos__ = 0;
        size_t J_2_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < J_2_limit_0__; ++i_0__) {
            J_2[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "N_2", "int", context__.to_vec());
        N_2 = int(0);
        vals_i__ = context__.vals_i("N_2");
        pos__ = 0;
        N_2 = vals_i__[pos__++];
        context__.validate_dims("data initialization", "K_2", "int", context__.to_vec());
        K_2 = int(0);
        vals_i__ = context__.vals_i("K_2");
        pos__ = 0;
        K_2 = vals_i__[pos__++];
        validate_non_negative_index("Z_2", "N", N);
        Z_2 = vector_d(static_cast<Eigen::VectorXd::Index>(N));
        context__.validate_dims("data initialization", "Z_2", "vector_d", context__.to_vec(N));
        vals_r__ = context__.vals_r("Z_2");
        pos__ = 0;
        size_t Z_2_i_vec_lim__ = N;
        for (size_t i_vec__ = 0; i_vec__ < Z_2_i_vec_lim__; ++i_vec__) {
            Z_2[i_vec__] = vals_r__[pos__++];
        }

        // validate, data variables
        check_greater_or_equal(function__,"N",N,1);
        for (int k0__ = 0; k0__ < N; ++k0__) {
            check_greater_or_equal(function__,"y[k0__]",y[k0__],0);
            check_less_or_equal(function__,"y[k0__]",y[k0__],1);
        }
        check_greater_or_equal(function__,"K",K,1);
        for (int k0__ = 0; k0__ < N; ++k0__) {
            check_greater_or_equal(function__,"J_1[k0__]",J_1[k0__],1);
        }
        check_greater_or_equal(function__,"N_1",N_1,1);
        check_greater_or_equal(function__,"K_1",K_1,1);
        for (int k0__ = 0; k0__ < N; ++k0__) {
            check_greater_or_equal(function__,"J_2[k0__]",J_2[k0__],1);
        }
        check_greater_or_equal(function__,"N_2",N_2,1);
        check_greater_or_equal(function__,"K_2",K_2,1);
        // initialize data variables

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        num_params_r__ += K;
        ++num_params_r__;
        ++num_params_r__;
        num_params_r__ += N_1;
        ++num_params_r__;
        num_params_r__ += N_2;
    }

    ~model_logistic() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("b")))
            throw std::runtime_error("variable b missing");
        vals_r__ = context__.vals_r("b");
        pos__ = 0U;
        context__.validate_dims("initialization", "b", "vector_d", context__.to_vec(K));
        // generate_declaration b
        vector_d b(static_cast<Eigen::VectorXd::Index>(K));
        for (int j1__ = 0U; j1__ < K; ++j1__)
            b(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(b);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable b: ") + e.what());
        }

        if (!(context__.contains_r("temp_Intercept")))
            throw std::runtime_error("variable temp_Intercept missing");
        vals_r__ = context__.vals_r("temp_Intercept");
        pos__ = 0U;
        context__.validate_dims("initialization", "temp_Intercept", "double", context__.to_vec());
        // generate_declaration temp_Intercept
        double temp_Intercept(0);
        temp_Intercept = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(temp_Intercept);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable temp_Intercept: ") + e.what());
        }

        if (!(context__.contains_r("sd_1")))
            throw std::runtime_error("variable sd_1 missing");
        vals_r__ = context__.vals_r("sd_1");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_1", "double", context__.to_vec());
        // generate_declaration sd_1
        double sd_1(0);
        sd_1 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_1);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_1: ") + e.what());
        }

        if (!(context__.contains_r("z_1")))
            throw std::runtime_error("variable z_1 missing");
        vals_r__ = context__.vals_r("z_1");
        pos__ = 0U;
        context__.validate_dims("initialization", "z_1", "vector_d", context__.to_vec(N_1));
        // generate_declaration z_1
        vector_d z_1(static_cast<Eigen::VectorXd::Index>(N_1));
        for (int j1__ = 0U; j1__ < N_1; ++j1__)
            z_1(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(z_1);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_1: ") + e.what());
        }

        if (!(context__.contains_r("sd_2")))
            throw std::runtime_error("variable sd_2 missing");
        vals_r__ = context__.vals_r("sd_2");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_2", "double", context__.to_vec());
        // generate_declaration sd_2
        double sd_2(0);
        sd_2 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_2);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_2: ") + e.what());
        }

        if (!(context__.contains_r("z_2")))
            throw std::runtime_error("variable z_2 missing");
        vals_r__ = context__.vals_r("z_2");
        pos__ = 0U;
        context__.validate_dims("initialization", "z_2", "vector_d", context__.to_vec(N_2));
        // generate_declaration z_2
        vector_d z_2(static_cast<Eigen::VectorXd::Index>(N_2));
        for (int j1__ = 0U; j1__ < N_2; ++j1__)
            z_2(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(z_2);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_2: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  b;
        (void) b;  // dummy to suppress unused var warning
        if (jacobian__)
            b = in__.vector_constrain(K,lp__);
        else
            b = in__.vector_constrain(K);

        T__ temp_Intercept;
        (void) temp_Intercept;  // dummy to suppress unused var warning
        if (jacobian__)
            temp_Intercept = in__.scalar_constrain(lp__);
        else
            temp_Intercept = in__.scalar_constrain();

        T__ sd_1;
        (void) sd_1;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_1 = in__.scalar_lb_constrain(0,lp__);
        else
            sd_1 = in__.scalar_lb_constrain(0);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  z_1;
        (void) z_1;  // dummy to suppress unused var warning
        if (jacobian__)
            z_1 = in__.vector_constrain(N_1,lp__);
        else
            z_1 = in__.vector_constrain(N_1);

        T__ sd_2;
        (void) sd_2;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_2 = in__.scalar_lb_constrain(0,lp__);
        else
            sd_2 = in__.scalar_lb_constrain(0);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  z_2;
        (void) z_2;  // dummy to suppress unused var warning
        if (jacobian__)
            z_2 = in__.vector_constrain(N_2,lp__);
        else
            z_2 = in__.vector_constrain(N_2);


        // transformed parameters
        Eigen::Matrix<T__,Eigen::Dynamic,1>  eta(static_cast<Eigen::VectorXd::Index>(N));
        (void) eta;  // dummy to suppress unused var warning
        stan::math::initialize(eta, DUMMY_VAR__);
        stan::math::fill(eta,DUMMY_VAR__);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  r_1(static_cast<Eigen::VectorXd::Index>(N_1));
        (void) r_1;  // dummy to suppress unused var warning
        stan::math::initialize(r_1, DUMMY_VAR__);
        stan::math::fill(r_1,DUMMY_VAR__);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  r_2(static_cast<Eigen::VectorXd::Index>(N_2));
        (void) r_2;  // dummy to suppress unused var warning
        stan::math::initialize(r_2, DUMMY_VAR__);
        stan::math::fill(r_2,DUMMY_VAR__);


        try {
            current_statement_begin__ = 33;
            stan::math::assign(eta, add(multiply(X,b),temp_Intercept));
            current_statement_begin__ = 34;
            stan::math::assign(r_1, multiply(sd_1,z_1));
            current_statement_begin__ = 35;
            stan::math::assign(r_2, multiply(sd_2,z_2));
            current_statement_begin__ = 36;
            for (int n = 1; n <= N; ++n) {

                current_statement_begin__ = 37;
                stan::math::assign(get_base1_lhs(eta,n,"eta",1), ((get_base1(eta,n,"eta",1) + (get_base1(r_1,get_base1(J_1,n,"J_1",1),"r_1",1) * get_base1(Z_1,n,"Z_1",1))) + (get_base1(r_2,get_base1(J_2,n,"J_2",1),"r_2",1) * get_base1(Z_2,n,"Z_2",1))));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int i0__ = 0; i0__ < N; ++i0__) {
            if (stan::math::is_uninitialized(eta(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: eta" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < N_1; ++i0__) {
            if (stan::math::is_uninitialized(r_1(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: r_1" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < N_2; ++i0__) {
            if (stan::math::is_uninitialized(r_2(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: r_2" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning

        // model body
        try {

            current_statement_begin__ = 42;
            lp_accum__.add(student_t_log<propto__>(sd_1, 3, 0, 10));
            current_statement_begin__ = 43;
            lp_accum__.add(normal_log<propto__>(z_1, 0, 1));
            current_statement_begin__ = 44;
            lp_accum__.add(student_t_log<propto__>(sd_2, 3, 0, 10));
            current_statement_begin__ = 45;
            lp_accum__.add(normal_log<propto__>(z_2, 0, 1));
            current_statement_begin__ = 48;
            lp_accum__.add(bernoulli_logit_log<propto__>(y, eta));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("b");
        names__.push_back("temp_Intercept");
        names__.push_back("sd_1");
        names__.push_back("z_1");
        names__.push_back("sd_2");
        names__.push_back("z_2");
        names__.push_back("eta");
        names__.push_back("r_1");
        names__.push_back("r_2");
        names__.push_back("b_Intercept");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_logistic_namespace::write_array";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        vector_d b = in__.vector_constrain(K);
        double temp_Intercept = in__.scalar_constrain();
        double sd_1 = in__.scalar_lb_constrain(0);
        vector_d z_1 = in__.vector_constrain(N_1);
        double sd_2 = in__.scalar_lb_constrain(0);
        vector_d z_2 = in__.vector_constrain(N_2);
        for (int k_0__ = 0; k_0__ < K; ++k_0__) {
            vars__.push_back(b[k_0__]);
        }
        vars__.push_back(temp_Intercept);
        vars__.push_back(sd_1);
        for (int k_0__ = 0; k_0__ < N_1; ++k_0__) {
            vars__.push_back(z_1[k_0__]);
        }
        vars__.push_back(sd_2);
        for (int k_0__ = 0; k_0__ < N_2; ++k_0__) {
            vars__.push_back(z_2[k_0__]);
        }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        vector_d eta(static_cast<Eigen::VectorXd::Index>(N));
        (void) eta;  // dummy to suppress unused var warning
        stan::math::initialize(eta, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(eta,DUMMY_VAR__);
        vector_d r_1(static_cast<Eigen::VectorXd::Index>(N_1));
        (void) r_1;  // dummy to suppress unused var warning
        stan::math::initialize(r_1, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(r_1,DUMMY_VAR__);
        vector_d r_2(static_cast<Eigen::VectorXd::Index>(N_2));
        (void) r_2;  // dummy to suppress unused var warning
        stan::math::initialize(r_2, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(r_2,DUMMY_VAR__);


        try {
            current_statement_begin__ = 33;
            stan::math::assign(eta, add(multiply(X,b),temp_Intercept));
            current_statement_begin__ = 34;
            stan::math::assign(r_1, multiply(sd_1,z_1));
            current_statement_begin__ = 35;
            stan::math::assign(r_2, multiply(sd_2,z_2));
            current_statement_begin__ = 36;
            for (int n = 1; n <= N; ++n) {

                current_statement_begin__ = 37;
                stan::math::assign(get_base1_lhs(eta,n,"eta",1), ((get_base1(eta,n,"eta",1) + (get_base1(r_1,get_base1(J_1,n,"J_1",1),"r_1",1) * get_base1(Z_1,n,"Z_1",1))) + (get_base1(r_2,get_base1(J_2,n,"J_2",1),"r_2",1) * get_base1(Z_2,n,"Z_2",1))));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        // write transformed parameters
        for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(eta[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < N_1; ++k_0__) {
            vars__.push_back(r_1[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < N_2; ++k_0__) {
            vars__.push_back(r_2[k_0__]);
        }

        if (!include_gqs__) return;
        // declare and define generated quantities
        double b_Intercept(0.0);
        (void) b_Intercept;  // dummy to suppress unused var warning
        stan::math::initialize(b_Intercept, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(b_Intercept,DUMMY_VAR__);


        try {
            current_statement_begin__ = 52;
            stan::math::assign(b_Intercept, (temp_Intercept - dot_product(X_means,b)));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
        vars__.push_back(b_Intercept);

    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_logistic";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "temp_Intercept";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_1";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= N_1; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_2";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= N_2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N_1; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "r_1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N_2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "r_2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "b_Intercept";
        param_names__.push_back(param_name_stream__.str());
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "temp_Intercept";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_1";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= N_1; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_2";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= N_2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N_1; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "r_1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N_2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "r_2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "b_Intercept";
        param_names__.push_back(param_name_stream__.str());
    }

}; // model

} // namespace




// Code generated by Stan version 2.14

#include <stan/model/model_header.hpp>

namespace model_poisson_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

class model_poisson : public prob_grad {
private:
    int N;
    vector<int> y;
    vector<int> J_1;
    int N_1;
    int K_1;
    vector_d Z_1;
    vector<int> J_2;
    int N_2;
    int K_2;
    vector_d Z_2;
public:
    model_poisson(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        typedef boost::ecuyer1988 rng_t;
        rng_t base_rng(0);  // 0 seed default
        ctor_body(context__, base_rng, pstream__);
    }

    template <class RNG>
    model_poisson(stan::io::var_context& context__,
        RNG& base_rng__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, base_rng__, pstream__);
    }

    template <class RNG>
    void ctor_body(stan::io::var_context& context__,
                   RNG& base_rng__,
                   std::ostream* pstream__) {
        current_statement_begin__ = -1;

        static const char* function__ = "model_poisson_namespace::model_poisson";
        (void) function__; // dummy call to supress warning
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        context__.validate_dims("data initialization", "N", "int", context__.to_vec());
        N = int(0);
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        N = vals_i__[pos__++];
        context__.validate_dims("data initialization", "y", "int", context__.to_vec(N));
        validate_non_negative_index("y", "N", N);
        y = std::vector<int>(N,int(0));
        vals_i__ = context__.vals_i("y");
        pos__ = 0;
        size_t y_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < y_limit_0__; ++i_0__) {
            y[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "J_1", "int", context__.to_vec(N));
        validate_non_negative_index("J_1", "N", N);
        J_1 = std::vector<int>(N,int(0));
        vals_i__ = context__.vals_i("J_1");
        pos__ = 0;
        size_t J_1_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < J_1_limit_0__; ++i_0__) {
            J_1[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "N_1", "int", context__.to_vec());
        N_1 = int(0);
        vals_i__ = context__.vals_i("N_1");
        pos__ = 0;
        N_1 = vals_i__[pos__++];
        context__.validate_dims("data initialization", "K_1", "int", context__.to_vec());
        K_1 = int(0);
        vals_i__ = context__.vals_i("K_1");
        pos__ = 0;
        K_1 = vals_i__[pos__++];
        validate_non_negative_index("Z_1", "N", N);
        Z_1 = vector_d(static_cast<Eigen::VectorXd::Index>(N));
        context__.validate_dims("data initialization", "Z_1", "vector_d", context__.to_vec(N));
        vals_r__ = context__.vals_r("Z_1");
        pos__ = 0;
        size_t Z_1_i_vec_lim__ = N;
        for (size_t i_vec__ = 0; i_vec__ < Z_1_i_vec_lim__; ++i_vec__) {
            Z_1[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "J_2", "int", context__.to_vec(N));
        validate_non_negative_index("J_2", "N", N);
        J_2 = std::vector<int>(N,int(0));
        vals_i__ = context__.vals_i("J_2");
        pos__ = 0;
        size_t J_2_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < J_2_limit_0__; ++i_0__) {
            J_2[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "N_2", "int", context__.to_vec());
        N_2 = int(0);
        vals_i__ = context__.vals_i("N_2");
        pos__ = 0;
        N_2 = vals_i__[pos__++];
        context__.validate_dims("data initialization", "K_2", "int", context__.to_vec());
        K_2 = int(0);
        vals_i__ = context__.vals_i("K_2");
        pos__ = 0;
        K_2 = vals_i__[pos__++];
        validate_non_negative_index("Z_2", "N", N);
        Z_2 = vector_d(static_cast<Eigen::VectorXd::Index>(N));
        context__.validate_dims("data initialization", "Z_2", "vector_d", context__.to_vec(N));
        vals_r__ = context__.vals_r("Z_2");
        pos__ = 0;
        size_t Z_2_i_vec_lim__ = N;
        for (size_t i_vec__ = 0; i_vec__ < Z_2_i_vec_lim__; ++i_vec__) {
            Z_2[i_vec__] = vals_r__[pos__++];
        }

        // validate, data variables
        check_greater_or_equal(function__,"N",N,1);
        for (int k0__ = 0; k0__ < N; ++k0__) {
            check_greater_or_equal(function__,"J_1[k0__]",J_1[k0__],1);
        }
        check_greater_or_equal(function__,"N_1",N_1,1);
        check_greater_or_equal(function__,"K_1",K_1,1);
        for (int k0__ = 0; k0__ < N; ++k0__) {
            check_greater_or_equal(function__,"J_2[k0__]",J_2[k0__],1);
        }
        check_greater_or_equal(function__,"N_2",N_2,1);
        check_greater_or_equal(function__,"K_2",K_2,1);
        // initialize data variables

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        ++num_params_r__;
        ++num_params_r__;
        num_params_r__ += N_1;
        ++num_params_r__;
        num_params_r__ += N_2;
    }

    ~model_poisson() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("temp_Intercept")))
            throw std::runtime_error("variable temp_Intercept missing");
        vals_r__ = context__.vals_r("temp_Intercept");
        pos__ = 0U;
        context__.validate_dims("initialization", "temp_Intercept", "double", context__.to_vec());
        // generate_declaration temp_Intercept
        double temp_Intercept(0);
        temp_Intercept = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(temp_Intercept);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable temp_Intercept: ") + e.what());
        }

        if (!(context__.contains_r("sd_1")))
            throw std::runtime_error("variable sd_1 missing");
        vals_r__ = context__.vals_r("sd_1");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_1", "double", context__.to_vec());
        // generate_declaration sd_1
        double sd_1(0);
        sd_1 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_1);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_1: ") + e.what());
        }

        if (!(context__.contains_r("z_1")))
            throw std::runtime_error("variable z_1 missing");
        vals_r__ = context__.vals_r("z_1");
        pos__ = 0U;
        context__.validate_dims("initialization", "z_1", "vector_d", context__.to_vec(N_1));
        // generate_declaration z_1
        vector_d z_1(static_cast<Eigen::VectorXd::Index>(N_1));
        for (int j1__ = 0U; j1__ < N_1; ++j1__)
            z_1(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(z_1);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_1: ") + e.what());
        }

        if (!(context__.contains_r("sd_2")))
            throw std::runtime_error("variable sd_2 missing");
        vals_r__ = context__.vals_r("sd_2");
        pos__ = 0U;
        context__.validate_dims("initialization", "sd_2", "double", context__.to_vec());
        // generate_declaration sd_2
        double sd_2(0);
        sd_2 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sd_2);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_2: ") + e.what());
        }

        if (!(context__.contains_r("z_2")))
            throw std::runtime_error("variable z_2 missing");
        vals_r__ = context__.vals_r("z_2");
        pos__ = 0U;
        context__.validate_dims("initialization", "z_2", "vector_d", context__.to_vec(N_2));
        // generate_declaration z_2
        vector_d z_2(static_cast<Eigen::VectorXd::Index>(N_2));
        for (int j1__ = 0U; j1__ < N_2; ++j1__)
            z_2(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(z_2);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_2: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        T__ temp_Intercept;
        (void) temp_Intercept;  // dummy to suppress unused var warning
        if (jacobian__)
            temp_Intercept = in__.scalar_constrain(lp__);
        else
            temp_Intercept = in__.scalar_constrain();

        T__ sd_1;
        (void) sd_1;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_1 = in__.scalar_lb_constrain(0,lp__);
        else
            sd_1 = in__.scalar_lb_constrain(0);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  z_1;
        (void) z_1;  // dummy to suppress unused var warning
        if (jacobian__)
            z_1 = in__.vector_constrain(N_1,lp__);
        else
            z_1 = in__.vector_constrain(N_1);

        T__ sd_2;
        (void) sd_2;  // dummy to suppress unused var warning
        if (jacobian__)
            sd_2 = in__.scalar_lb_constrain(0,lp__);
        else
            sd_2 = in__.scalar_lb_constrain(0);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  z_2;
        (void) z_2;  // dummy to suppress unused var warning
        if (jacobian__)
            z_2 = in__.vector_constrain(N_2,lp__);
        else
            z_2 = in__.vector_constrain(N_2);


        // transformed parameters
        Eigen::Matrix<T__,Eigen::Dynamic,1>  r_1(static_cast<Eigen::VectorXd::Index>(N_1));
        (void) r_1;  // dummy to suppress unused var warning
        stan::math::initialize(r_1, DUMMY_VAR__);
        stan::math::fill(r_1,DUMMY_VAR__);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  r_2(static_cast<Eigen::VectorXd::Index>(N_2));
        (void) r_2;  // dummy to suppress unused var warning
        stan::math::initialize(r_2, DUMMY_VAR__);
        stan::math::fill(r_2,DUMMY_VAR__);
        Eigen::Matrix<T__,Eigen::Dynamic,1>  eta(static_cast<Eigen::VectorXd::Index>(N));
        (void) eta;  // dummy to suppress unused var warning
        stan::math::initialize(eta, DUMMY_VAR__);
        stan::math::fill(eta,DUMMY_VAR__);


        try {
            current_statement_begin__ = 29;
            stan::math::assign(r_1, multiply(sd_1,z_1));
            current_statement_begin__ = 30;
            stan::math::assign(r_2, multiply(sd_2,z_2));
            current_statement_begin__ = 31;
            stan::math::assign(eta, add(rep_vector(0,N),temp_Intercept));
            current_statement_begin__ = 32;
            for (int n = 1; n <= N; ++n) {

                current_statement_begin__ = 33;
                stan::math::assign(get_base1_lhs(eta,n,"eta",1), ((get_base1(eta,n,"eta",1) + (get_base1(r_1,get_base1(J_1,n,"J_1",1),"r_1",1) * get_base1(Z_1,n,"Z_1",1))) + (get_base1(r_2,get_base1(J_2,n,"J_2",1),"r_2",1) * get_base1(Z_2,n,"Z_2",1))));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int i0__ = 0; i0__ < N_1; ++i0__) {
            if (stan::math::is_uninitialized(r_1(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: r_1" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < N_2; ++i0__) {
            if (stan::math::is_uninitialized(r_2(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: r_2" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }
        for (int i0__ = 0; i0__ < N; ++i0__) {
            if (stan::math::is_uninitialized(eta(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: eta" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning

        // model body
        try {

            current_statement_begin__ = 38;
            lp_accum__.add(student_t_log<propto__>(sd_1, 3, 0, 10));
            current_statement_begin__ = 39;
            lp_accum__.add(normal_log<propto__>(z_1, 0, 1));
            current_statement_begin__ = 40;
            lp_accum__.add(student_t_log<propto__>(sd_2, 3, 0, 10));
            current_statement_begin__ = 41;
            lp_accum__.add(normal_log<propto__>(z_2, 0, 1));
            current_statement_begin__ = 44;
            lp_accum__.add(poisson_log_log<propto__>(y, eta));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("temp_Intercept");
        names__.push_back("sd_1");
        names__.push_back("z_1");
        names__.push_back("sd_2");
        names__.push_back("z_2");
        names__.push_back("r_1");
        names__.push_back("r_2");
        names__.push_back("eta");
        names__.push_back("b_Intercept");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_poisson_namespace::write_array";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        double temp_Intercept = in__.scalar_constrain();
        double sd_1 = in__.scalar_lb_constrain(0);
        vector_d z_1 = in__.vector_constrain(N_1);
        double sd_2 = in__.scalar_lb_constrain(0);
        vector_d z_2 = in__.vector_constrain(N_2);
        vars__.push_back(temp_Intercept);
        vars__.push_back(sd_1);
        for (int k_0__ = 0; k_0__ < N_1; ++k_0__) {
            vars__.push_back(z_1[k_0__]);
        }
        vars__.push_back(sd_2);
        for (int k_0__ = 0; k_0__ < N_2; ++k_0__) {
            vars__.push_back(z_2[k_0__]);
        }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        vector_d r_1(static_cast<Eigen::VectorXd::Index>(N_1));
        (void) r_1;  // dummy to suppress unused var warning
        stan::math::initialize(r_1, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(r_1,DUMMY_VAR__);
        vector_d r_2(static_cast<Eigen::VectorXd::Index>(N_2));
        (void) r_2;  // dummy to suppress unused var warning
        stan::math::initialize(r_2, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(r_2,DUMMY_VAR__);
        vector_d eta(static_cast<Eigen::VectorXd::Index>(N));
        (void) eta;  // dummy to suppress unused var warning
        stan::math::initialize(eta, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(eta,DUMMY_VAR__);


        try {
            current_statement_begin__ = 29;
            stan::math::assign(r_1, multiply(sd_1,z_1));
            current_statement_begin__ = 30;
            stan::math::assign(r_2, multiply(sd_2,z_2));
            current_statement_begin__ = 31;
            stan::math::assign(eta, add(rep_vector(0,N),temp_Intercept));
            current_statement_begin__ = 32;
            for (int n = 1; n <= N; ++n) {

                current_statement_begin__ = 33;
                stan::math::assign(get_base1_lhs(eta,n,"eta",1), ((get_base1(eta,n,"eta",1) + (get_base1(r_1,get_base1(J_1,n,"J_1",1),"r_1",1) * get_base1(Z_1,n,"Z_1",1))) + (get_base1(r_2,get_base1(J_2,n,"J_2",1),"r_2",1) * get_base1(Z_2,n,"Z_2",1))));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        // write transformed parameters
        for (int k_0__ = 0; k_0__ < N_1; ++k_0__) {
            vars__.push_back(r_1[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < N_2; ++k_0__) {
            vars__.push_back(r_2[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(eta[k_0__]);
        }

        if (!include_gqs__) return;
        // declare and define generated quantities
        double b_Intercept(0.0);
        (void) b_Intercept;  // dummy to suppress unused var warning
        stan::math::initialize(b_Intercept, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(b_Intercept,DUMMY_VAR__);


        try {
            current_statement_begin__ = 48;
            stan::math::assign(b_Intercept, temp_Intercept);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
        vars__.push_back(b_Intercept);

    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_poisson";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "temp_Intercept";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_1";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= N_1; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_2";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= N_2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= N_1; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "r_1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N_2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "r_2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "b_Intercept";
        param_names__.push_back(param_name_stream__.str());
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "temp_Intercept";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_1";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= N_1; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_2";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= N_2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= N_1; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "r_1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N_2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "r_2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "b_Intercept";
        param_names__.push_back(param_name_stream__.str());
    }

}; // model

} // namespace




#endif
